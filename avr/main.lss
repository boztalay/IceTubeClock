
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000294  00000328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000294  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  0000032a  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000032a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000340  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000859  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000020b  00000000  00000000  00000c21  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000253  00000000  00000000  00000e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  00001080  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000026e  00000000  00000000  00001144  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002b  00000000  00000000  000013b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000013dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e9       	ldi	r30, 0x94	; 148
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 be 00 	call	0x17c	; 0x17c <main>
  9e:	0c 94 48 01 	jmp	0x290	; 0x290 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setUpSystemClock>:
	}
}

void setUpSystemClock() {
	//Notify it that we want to change the prescaler
	CLKPR = _BV(CLKPCE);
  a6:	e1 e6       	ldi	r30, 0x61	; 97
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 e8       	ldi	r24, 0x80	; 128
  ac:	80 83       	st	Z, r24

	//Set the prescaler to 1 (should give us 8MHz)
	CLKPR = 0x00;
  ae:	10 82       	st	Z, r1
  b0:	08 95       	ret

000000b2 <setUpBoostSupplyPWM>:
}

void setUpBoostSupplyPWM() {
	//Set up PORTD.6 as our PWM output, which is for OC0A
	PORTD = 0x00;
  b2:	1b b8       	out	0x0b, r1	; 11
	DDRD = _BV(DDD6);
  b4:	80 e4       	ldi	r24, 0x40	; 64
  b6:	8a b9       	out	0x0a, r24	; 10

	//Set up Timer0 OC0A for Phase-Correct Non-Inverted PWM
	TCCR0A = _BV(COM0A1) | _BV(WGM00);
  b8:	81 e8       	ldi	r24, 0x81	; 129
  ba:	84 bd       	out	0x24, r24	; 36

	//Set the clk_io prescaler to 1, so we should get about 16KHz
	TCCR0B = _BV(CS00);
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	85 bd       	out	0x25, r24	; 37
}

void setBoostSupplyDutyCycle(uint8_t dutyCycle) {
	//Set the PWM output compare register to the duty cycle value
	//Actual duty cycle should be dutyCycle / 255
	OCR0A = dutyCycle;
  c0:	82 e8       	ldi	r24, 0x82	; 130
  c2:	87 bd       	out	0x27, r24	; 39
  c4:	08 95       	ret

000000c6 <setBoostSupplyDutyCycle>:
  c6:	87 bd       	out	0x27, r24	; 39
  c8:	08 95       	ret

000000ca <setUpBoostSupplyVoltageMonitor>:
}

void setUpBoostSupplyVoltageMonitor() {
	//Enable the ADC and set its clock prescaler to 128
	ADCSRA = _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0);
  ca:	87 e8       	ldi	r24, 0x87	; 135
  cc:	80 93 7a 00 	sts	0x007A, r24
  d0:	08 95       	ret

000000d2 <setUpTubeDriverInterface>:
	//OUT17	Tube 1 H
	//OUT18	Tube 1 GRID
	//OUT19	NC
	
	//Set up all of the interface pins as output, outputs to 0
	PORTB = 0x00;
  d2:	15 b8       	out	0x05, r1	; 5
	DDRB = _BV(DDB4) | _BV(DDB3) | _BV(DDB2) | _BV(DDB1);
  d4:	8e e1       	ldi	r24, 0x1E	; 30
  d6:	84 b9       	out	0x04, r24	; 4
  d8:	08 95       	ret

000000da <waitForTubeWarmup>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	2f e9       	ldi	r18, 0x9F	; 159
  dc:	86 e8       	ldi	r24, 0x86	; 134
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <waitForTubeWarmup+0x6>
  e8:	00 c0       	rjmp	.+0      	; 0xea <waitForTubeWarmup+0x10>
  ea:	00 00       	nop
  ec:	08 95       	ret

000000ee <getBoostSupplyVoltage>:
	}
}

uint16_t getBoostSupplyVoltage() {
	//Select channel 0 to read from
	ADMUX = (ADMUX & 0xF0);
  ee:	80 91 7c 00 	lds	r24, 0x007C
  f2:	80 7f       	andi	r24, 0xF0	; 240
  f4:	80 93 7c 00 	sts	0x007C, r24

	//Start the conversion
	ADCSRA |= _BV(ADSC);
  f8:	80 91 7a 00 	lds	r24, 0x007A
  fc:	80 64       	ori	r24, 0x40	; 64
  fe:	80 93 7a 00 	sts	0x007A, r24

	//Wait for the conversion to finish
	while(!bit_is_set(ADCSRA, ADIF)) { }
 102:	80 91 7a 00 	lds	r24, 0x007A
 106:	84 ff       	sbrs	r24, 4
 108:	fc cf       	rjmp	.-8      	; 0x102 <getBoostSupplyVoltage+0x14>

	//Clear ADIF
	ADCSRA |= _BV(ADIF);
 10a:	80 91 7a 00 	lds	r24, 0x007A
 10e:	80 61       	ori	r24, 0x10	; 16
 110:	80 93 7a 00 	sts	0x007A, r24

	//ADC holds our value
	return ADC;
 114:	80 91 78 00 	lds	r24, 0x0078
 118:	90 91 79 00 	lds	r25, 0x0079
}
 11c:	08 95       	ret

0000011e <process_boostSupplyVoltageMonitor>:

void process_boostSupplyVoltageMonitor() {
	static uint16_t callsSinceLastCheck = 0; //Remember static variables only get initialized once
	static uint8_t currentDutyCycle = BOOST_DEFAULT_DUTY;

	callsSinceLastCheck++;
 11e:	80 91 02 01 	lds	r24, 0x0102
 122:	90 91 03 01 	lds	r25, 0x0103
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	90 93 03 01 	sts	0x0103, r25
 12c:	80 93 02 01 	sts	0x0102, r24
	if(callsSinceLastCheck > 25000) {
 130:	89 3a       	cpi	r24, 0xA9	; 169
 132:	91 46       	sbci	r25, 0x61	; 97
 134:	b8 f0       	brcs	.+46     	; 0x164 <process_boostSupplyVoltageMonitor+0x46>
		uint16_t boostVoltage = getBoostSupplyVoltage();
 136:	0e 94 77 00 	call	0xee	; 0xee <getBoostSupplyVoltage>
 13a:	20 91 00 01 	lds	r18, 0x0100
		
		if(boostVoltage > BOOST_TARGET + BOOST_LIMIT) {
 13e:	82 3b       	cpi	r24, 0xB2	; 178
 140:	33 e0       	ldi	r19, 0x03	; 3
 142:	93 07       	cpc	r25, r19
 144:	10 f0       	brcs	.+4      	; 0x14a <process_boostSupplyVoltageMonitor+0x2c>
			currentDutyCycle--;
 146:	21 50       	subi	r18, 0x01	; 1
 148:	04 c0       	rjmp	.+8      	; 0x152 <process_boostSupplyVoltageMonitor+0x34>
		} else if(boostVoltage < BOOST_TARGET - BOOST_LIMIT) {
 14a:	8d 39       	cpi	r24, 0x9D	; 157
 14c:	93 40       	sbci	r25, 0x03	; 3
 14e:	18 f4       	brcc	.+6      	; 0x156 <process_boostSupplyVoltageMonitor+0x38>
			currentDutyCycle++;
 150:	2f 5f       	subi	r18, 0xFF	; 255
 152:	20 93 00 01 	sts	0x0100, r18
		}

		setBoostSupplyDutyCycle(currentDutyCycle);
 156:	80 91 00 01 	lds	r24, 0x0100
}

void setBoostSupplyDutyCycle(uint8_t dutyCycle) {
	//Set the PWM output compare register to the duty cycle value
	//Actual duty cycle should be dutyCycle / 255
	OCR0A = dutyCycle;
 15a:	87 bd       	out	0x27, r24	; 39
		} else if(boostVoltage < BOOST_TARGET - BOOST_LIMIT) {
			currentDutyCycle++;
		}

		setBoostSupplyDutyCycle(currentDutyCycle);
		callsSinceLastCheck = 0;
 15c:	10 92 03 01 	sts	0x0103, r1
 160:	10 92 02 01 	sts	0x0102, r1
 164:	08 95       	ret

00000166 <sendBitToTubeDrivers>:
	return ADC;
}

void sendBitToTubeDrivers(uint8_t bit) {
	//Set DIN according to the bit
	if(bit == 0) {
 166:	81 11       	cpse	r24, r1
 168:	02 c0       	rjmp	.+4      	; 0x16e <sendBitToTubeDrivers+0x8>
		//Set DIN to 0
		PORTB &= ~_BV(PINB4);
 16a:	2c 98       	cbi	0x05, 4	; 5
 16c:	01 c0       	rjmp	.+2      	; 0x170 <sendBitToTubeDrivers+0xa>
	} else {
		//Set DIN to 1
		PORTB |= _BV(PINB4);
 16e:	2c 9a       	sbi	0x05, 4	; 5
	}

	//Toggle the clock, 1 then 0
	PORTB |= _BV(PINB2);
 170:	2a 9a       	sbi	0x05, 2	; 5
	PORTB &= ~_BV(PINB2);
 172:	2a 98       	cbi	0x05, 2	; 5
 174:	08 95       	ret

00000176 <latchTubeDrivers>:
}

void latchTubeDrivers() {
	//Toggle LATCH, 1 then 0
	PORTB |= _BV(PINB3);
 176:	2b 9a       	sbi	0x05, 3	; 5
	PORTB &= ~_BV(PINB3);
 178:	2b 98       	cbi	0x05, 3	; 5
 17a:	08 95       	ret

0000017c <main>:

void sendBitToTubeDrivers(uint8_t);
void latchTubeDrivers(void);

int main(void) {
	setUpSystemClock();
 17c:	0e 94 53 00 	call	0xa6	; 0xa6 <setUpSystemClock>

	setUpBoostSupplyPWM();
 180:	0e 94 59 00 	call	0xb2	; 0xb2 <setUpBoostSupplyPWM>
	OCR0A = dutyCycle;
}

void setUpBoostSupplyVoltageMonitor() {
	//Enable the ADC and set its clock prescaler to 128
	ADCSRA = _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0);
 184:	87 e8       	ldi	r24, 0x87	; 135
 186:	80 93 7a 00 	sts	0x007A, r24
int main(void) {
	setUpSystemClock();

	setUpBoostSupplyPWM();
	setUpBoostSupplyVoltageMonitor();
	setUpTubeDriverInterface();
 18a:	0e 94 69 00 	call	0xd2	; 0xd2 <setUpTubeDriverInterface>
 18e:	2f e9       	ldi	r18, 0x9F	; 159
 190:	86 e8       	ldi	r24, 0x86	; 134
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0x18>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x22>
 19e:	00 00       	nop
	//OUT16	Tube 3 G
	//OUT17	Tube 3 H
	//OUT18	Tube 3 GRID
	//OUT19	NC

	sendBitToTubeDrivers(1);	//Tube 3 GRID
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(1);	//Tube 3 H
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(0);	//Tube 3 G
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(1);	//Tube 3 F
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(0);	//Tube 3 E
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(1);	//Tube 3 D
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(1);	//Tube 3 C
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(0);	//Tube 3 B
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(0);	//Tube 3 A
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(1);	//Tube 2 GRID
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(0);	//Tube 2 H
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(0);	//Tube 2 G
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(1);	//Tube 2 F
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(1);	//Tube 2 E
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(1);	//Tube 2 D
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(0);	//Tube 2 C
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(1);	//Tube 2 B
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(1);	//Tube 2 A
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(0);	//NC
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(0);	//NC
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(1);	//Tube 1 GRID
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(0);	//Tube 1 H
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(0);	//Tube 1 G
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(1);	//Tube 1 F
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(1);	//Tube 1 E
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(1);	//Tube 1 D
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(0);	//Tube 1 C
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(1);	//Tube 1 B
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(1);	//Tube 1 A
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(1);	//Tube 0 GRID
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(1);	//Tube 0 H
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(0);	//Tube 0 G
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(1);	//Tube 0 F
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(0);	//Tube 0 E
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(1);	//Tube 0 D
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(1);	//Tube 0 C
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(0);	//Tube 0 B
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(0);	//Tube 0 A
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	sendBitToTubeDrivers(0);	//NC, need it to push everything up
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	0e 94 b3 00 	call	0x166	; 0x166 <sendBitToTubeDrivers>
	latchTubeDrivers();
 28a:	0e 94 bb 00 	call	0x176	; 0x176 <latchTubeDrivers>
 28e:	ff cf       	rjmp	.-2      	; 0x28e <main+0x112>

00000290 <_exit>:
 290:	f8 94       	cli

00000292 <__stop_program>:
 292:	ff cf       	rjmp	.-2      	; 0x292 <__stop_program>
